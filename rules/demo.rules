
var Integer phc_int

rule "Cron 2 Minuten" 
when 
    Time cron "0 0/2 * * * ?" 
then
/**/
    publish ("phcmqtt","phc/amd/0/1","3")
    Thread::sleep(20)
    publish ("phcmqtt","phc/amd/1/1","3")
    Thread::sleep(20)
    publish ("phcmqtt","phc/amd/2/1","3")
    Thread::sleep(20)
    publish ("phcmqtt","phc/amd/3/1","3")
    Thread::sleep(20)
    publish ("phcmqtt","phc/amd/4/1","3")
    Thread::sleep(40)
    publish ("phcmqtt","phc/dim/0/1","3")
    Thread::sleep(40)
    publish ("phcmqtt","phc/dim/2/0","3")

/**/
end


rule "WRAUM Türe change"
when
    Item Sec_WIR_Tuer received update 
then
    Sec_WIR_Tuer_lastupdate.postUpdate(new DateTimeType())
end

rule "VORZ Türe change"
when
    Item Sec_VOR_Tuer received update
then
    Sec_VOR_Tuer_lastupdate.postUpdate(new DateTimeType())
end

rule "Daniel Fenster change"
when
    Item Sec_EG_DanielFenster received update
then
    Sec_EG_DanielFenster_lastupdate.postUpdate(new DateTimeType())
end

rule "DB Funkschalter EIN"
when
    Item SW_DB_Funk_Schreib1 received update ON
then
 
    Lght_DB_Mitte.sendCommand(ON) /*means toggle - not on or off*/  
     
end

rule "DB Funkschalter AUS"
when
    Item SW_DB_Funk_Schreib2 received update ON
then
 
    Lght_DB_Hinten.sendCommand(ON)  
     
end

rule "Bewegung Aussen 01 EIN"
when
    Item Mot_OUT_01 received update ON 
then

    if  (Mot_OUT_01_bright.state < 60) {
        if (Lght_EG_HOF.state == "OFF") {Lght_EG_HOF.sendCommand(ON)}
        if (Lght_EG_HR_aussen.state == "OFF") { Lght_EG_HR_aussen.sendCommand(ON)}
        Lght_OUT_Holler.sendCommand(ON)
        Lght_OUT_Sonja.sendCommand(ON)
        Lght_GA_Pergola.sendCommand(ON)
        Lght_OUT_Zaun.sendCommand(ON)
    }
end

rule "Bewegung Aussen 01 AUS"
when
    Item Mot_OUT_01 received update OFF
then
        if (Lght_EG_HOF.state == "ON") {Lght_EG_HOF.sendCommand(OFF)}
        Lght_OUT_Holler.sendCommand(OFF)
        Lght_OUT_Sonja.sendCommand(OFF)
        if (Lght_EG_HR_aussen.state == "ON") { Lght_EG_HR_aussen.sendCommand(OFF)}
        Lght_GA_Pergola.sendCommand(OFF)
        Lght_OUT_Zaun.sendCommand(OFF)
    

end

/* ------------------------------------------ AMD MQTT update rules ------------------------------------------*/
rule "AMD0 update"
when 
    Item PHC_AMD_00 received update
then

 /* var Integer phc_int = Integer::parseInt(PHC_AMD_00.state.toString)
 */
  PHC_Status.postUpdate(PHC_AMD_00.state.toString)

  var Integer phc_int = Integer::parseInt(PHC_AMD_00.state.toString)
  
     
   if (phc_int.bitwiseAnd(1) == 1) {
         Lght_EG_WIR_Spots.postUpdate("ON")} else {Lght_EG_WIR_Spots.postUpdate("OFF")}
       
    if (phc_int.bitwiseAnd(2) == 2) {
      Lght_EG_KUE_Spots.postUpdate("ON")} else {Lght_EG_KUE_Spots.postUpdate("OFF")}
    
    if (phc_int.bitwiseAnd(4) == 4) {
      Lght_NixWissen02.postUpdate("ON")} else {Lght_NixWissen02.postUpdate("OFF")}
   
   if (phc_int.bitwiseAnd(8) == 8) {
     Lght_OG_DaZi02.postUpdate("ON")} else {Lght_OG_DaZi02.postUpdate("OFF")}
  
   if (phc_int.bitwiseAnd(16) == 16) {
      Plug_EG_WZ_TV.postUpdate("ON")} else {Plug_EG_WZ_TV.postUpdate("OFF")}
       
    if (phc_int.bitwiseAnd(32) == 32) {
    Lght_OG_SiZi02.postUpdate("ON")} else {Lght_OG_SiZi02.postUpdate("OFF")}

    if (phc_int.bitwiseAnd(64) == 64) {
    Plug_EG_WZ_Lichtl.postUpdate("ON")} else {Plug_EG_WZ_Lichtl.postUpdate("OFF")}    
          
   if (phc_int.bitwiseAnd(128) == 128) {
    Lght_OG_BAD_LA.postUpdate("ON")} else {Lght_OG_BAD_LA.postUpdate("OFF")} 
       


end

rule "AMD01 update"
when 
    Item PHC_AMD_01 received update
then
  
   var Integer phc_int = Integer::parseInt(PHC_AMD_01.state.toString)
  
     
   if (phc_int.bitwiseAnd(1) == 1) {
         Lght_EG_HOF.postUpdate("ON")} else {Lght_EG_HOF.postUpdate("OFF")}
       
    if (phc_int.bitwiseAnd(2) == 2) {
      Lght_EG_WIR_Spiegel.postUpdate("ON")} else {Lght_EG_WIR_Spiegel.postUpdate("OFF")}

    if (phc_int.bitwiseAnd(4) == 4) {
      Lght_EG_KUE_Aplatte.postUpdate("ON")} else {Lght_EG_KUE_Aplatte.postUpdate("OFF")}
       
   if (phc_int.bitwiseAnd(8) == 8) {
     Lght_EG_KUE_Bar.postUpdate("ON")} else {Lght_EG_KUE_Bar.postUpdate("OFF")}

       if (phc_int.bitwiseAnd(16) == 16) {
     Lght_EG_WC.postUpdate("ON")} else {Lght_EG_WC.postUpdate("OFF")}
       
    if (phc_int.bitwiseAnd(32) == 32) {
    Lght_EG_VOR_Mitte.postUpdate("ON")} else {Lght_EG_VOR_Mitte.postUpdate("OFF")}

     if (phc_int.bitwiseAnd(64) == 64) {
    Powr_EG_WIR_Lueftung.postUpdate("ON")} else {Powr_EG_WIR_Lueftung.postUpdate("OFF")}      
          
   if (phc_int.bitwiseAnd(128) == 128) {
   Lght_DB_Hinten.postUpdate("ON")} else {Lght_DB_Hinten.postUpdate("OFF")} 
       
end


rule "AMD02 update"
when 
    Item PHC_AMD_02 received update
then
  
   var Integer phc_int = Integer::parseInt(PHC_AMD_02.state.toString)
  
     
   if (phc_int.bitwiseAnd(1) == 1) {
         Plug_OG_BoxStrom.postUpdate("ON")} else {Plug_OG_BoxStrom.postUpdate("OFF")}
       
    if (phc_int.bitwiseAnd(2) == 2) {
      Lght_OG_SRR_Mitte.postUpdate("ON")} else {Lght_OG_SRR_Mitte.postUpdate("OFF")}

    if (phc_int.bitwiseAnd(4) == 4) {
      Lght_OG_SRR_Leds.postUpdate("ON")} else {Lght_OG_SRR_Leds.postUpdate("OFF")}
       
   if (phc_int.bitwiseAnd(8) == 8) {
     Lght_EG_HR_Mitte.postUpdate("ON")} else {Lght_EG_HR_Mitte.postUpdate("OFF")}

       if (phc_int.bitwiseAnd(16) == 16) {
     Lght_OG_SLZ_Xandi.postUpdate("ON")} else {Lght_OG_SLZ_Xandi.postUpdate("OFF")}
       
    if (phc_int.bitwiseAnd(32) == 32) {
    Lght_OG_SLZ_Clemi.postUpdate("ON")} else {Lght_OG_SLZ_Clemi.postUpdate("OFF")}

     if (phc_int.bitwiseAnd(64) == 64) {
    Lght_OG_SRR_Spieg.postUpdate("ON")} else {Lght_OG_SRR_Spieg.postUpdate("OFF")}      
          
   if (phc_int.bitwiseAnd(128) == 128) {
   Lght_EG_HR_aussen.postUpdate("ON")} else {Lght_EG_HR_aussen.postUpdate("OFF")} 
       
end

rule "AMD03 update"
when 
    Item PHC_AMD_03 received update
then
  
   var Integer phc_int = Integer::parseInt(PHC_AMD_03.state.toString)
  
     
   if (phc_int.bitwiseAnd(1) == 1) {
         Lght_OUT_Eingang.postUpdate("ON")} else {Lght_OUT_Eingang.postUpdate("OFF")}
       
    if (phc_int.bitwiseAnd(2) == 2) {
      Plug_EG_WC_Vent.postUpdate("ON")} else {Plug_EG_WC_Vent.postUpdate("OFF")}

    if (phc_int.bitwiseAnd(4) == 4) {
      Plug_OG_WC_Vent.postUpdate("ON")} else {Plug_OG_WC_Vent.postUpdate("OFF")}
       
   if (phc_int.bitwiseAnd(8) == 8) {
     Lght_OG_WC_Mitte.postUpdate("ON")} else {Lght_OG_WC_Mitte.postUpdate("OFF")}

       if (phc_int.bitwiseAnd(16) == 16) {
     Lght_EG_VZ_Lichts.postUpdate("ON")} else {Lght_EG_VZ_Lichts.postUpdate("OFF")}
       
    if (phc_int.bitwiseAnd(32) == 32) {
    Lght_NixWissen35.postUpdate("ON")} else {Lght_NixWissen35.postUpdate("OFF")}

     if (phc_int.bitwiseAnd(64) == 64) {
    Lght_OG_VOR_Mitte.postUpdate("ON")} else {Lght_OG_VOR_Mitte.postUpdate("OFF")}      
          
   if (phc_int.bitwiseAnd(128) == 128) {
   Lght_EG_VOR_Korpus.postUpdate("ON")} else {Lght_EG_VOR_Korpus.postUpdate("OFF")} 
       
end

rule "AMD04 update"
when 
    Item PHC_AMD_04 received update
then
  
   var Integer phc_int = Integer::parseInt(PHC_AMD_04.state.toString)
  
     
   if (phc_int.bitwiseAnd(1) == 1) {
         Lght_DB_STG.postUpdate("ON")} else {Lght_DB_STG.postUpdate("OFF")}
       
    if (phc_int.bitwiseAnd(2) == 2) {
      Lght_OG_BAD_Spiegel.postUpdate("ON")} else {Lght_OG_BAD_Spiegel.postUpdate("OFF")}

    if (phc_int.bitwiseAnd(4) == 4) {
      Lght_DB_Vorne.postUpdate("ON")} else {Lght_DB_Vorne.postUpdate("OFF")}
       
   if (phc_int.bitwiseAnd(8) == 8) {
     Lght_DB_Mitte.postUpdate("ON")} else {Lght_DB_Mitte.postUpdate("OFF")}

       if (phc_int.bitwiseAnd(16) == 16) {
     Plug_WIR_Scanner.postUpdate("ON")} else {Plug_WIR_Scanner.postUpdate("OFF")}
       
    if (phc_int.bitwiseAnd(32) == 32) {
    Plug_OUT_Terrasse.postUpdate("ON")} else {Plug_OUT_Terrasse.postUpdate("OFF")}
/*
     if (phc_int.bitwiseAnd(64) == 64) {
    Lght_OG_VOR_Mitte.postUpdate("ON")} else {Lght_OG_VOR_Mitte.postUpdate("OFF")}      
          
   if (phc_int.bitwiseAnd(128) == 128) {
   Lght_EG_VOR_Korpus.postUpdate("ON")} else {Lght_EG_VOR_Korpus.postUpdate("OFF")} 
  */     
end

/* -------------------------------------------- DIMMER -------------------------------------------- */

rule "DIM00 update"
when 
    Item PHC_DIM_00 received update
then
  
   var Integer phc_int = Integer::parseInt(PHC_DIM_00.state.toString)
  
     
   if (phc_int.bitwiseAnd(1) == 1) {
        Lght_EG_Tisch_Dim.postUpdate("ON")} else {Lght_EG_Tisch_Dim.postUpdate("OFF")}
       
    if (phc_int.bitwiseAnd(2) == 2) {
      Lght_EG_TVLicht_Dim.postUpdate("ON")} else {Lght_EG_TVLicht_Dim.postUpdate("OFF")}
end


rule "DIM02 update"
when 
    Item PHC_DIM_02 received update
then
  
   var Integer phc_int = Integer::parseInt(PHC_DIM_02.state.toString)
  
     
   if (phc_int.bitwiseAnd(1) == 1) {
         Lght_OG_Daniel_Dim.postUpdate("ON")} else {Lght_OG_Daniel_Dim.postUpdate("OFF")}
       
    if (phc_int.bitwiseAnd(2) == 2) {
      Lght_OG_Simon_Dim.postUpdate("ON")} else {Lght_OG_Simon_Dim.postUpdate("OFF")}


end

